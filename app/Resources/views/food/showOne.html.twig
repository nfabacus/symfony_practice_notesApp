{# extends layout #}
{% extends 'base.html.twig' %}

{% block title %}
    my Food: {{ food.name }}
{% endblock %}

{# take out 'body' block from the layout and change it like below. #}
{%  block body %}
    <h2>I am the body block</h2>
    <p>With Block in twig template, you can inherit from or override stylesheets and scripts in the block. </p>

    You can see every variables available here with dump() function.
    {{ dump() }}

    <h1>The Food: {{ food.name }}</h1>
    <ul>
        <li>category: {{ food.category }}</li>
        <li>Popularity Count: {{ food.popularityCount }}</li>
        <li>Published?: {{ food.isPublished }}</li>
        <li>Type: {{ food.type }}</li>
        <li>Published On: {{ food.publishedOn|date('Y-m-d') }}</li>
    </ul>

    <h3>Number formatting in twig</h3>
    <p>{{  '1230000'|number_format }}</p>

    You can take out each item of an array using 'for ... in ...'
    <ul>
        {% for dish in foodList %}
          <li>{{  dish | raw }}</li>

        {% endfor %}
    </ul>

    {#just an example of genrating url effectively. #}
    {#path - first argument is the name specified in the route. second object is - key is the wildcard in the route, and value is the variable came passing through to twig.#}
    <a href="{{ path('food_show_notes', { 'foodName': food.name }) }}">Json Notes</a>

    <h2>How to make an entity using Doctrine</h2>
    <ul>
        <li>Create a folder called Entity under AppBundle in src folder.</li>
        <li>Create a PHP class.  Make sure that namespace is AppBundle\Entity</li>
        <li>Inside class { }, right-click and select Generate (PHP storm)</li>
        <li>Select ORM Class.  It will create two annotations.
            /**
            * @ORM\Entity
            * @ORM\Table(name="food")
            */
        </li>
        <li>Create private $id and private $name (for example) inside the class</li>
        <li>Click one of them and Gnenerate again. Select ORM annotation.</li>
        <li>Then, select both id and name.  It will generate annotation for both of them.</li>
        <li>Create database if you haven't yet by bin/console doctrine:database:create</li>
        <li>To create the table, bin/console doctrine:schema update --force
            (if you just want to check before you force, you do --dump-sql</li>


        // bin/console doctrine:schema:update --force
        // BUT DON'T DO IT in Production!  It may erase data.
        // Use doctrine/doctrine-migration-bundle.
        // http://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html
        // If it is not installed, do composer require doctrine/doctrine-migrations-bundle
        // Make sure to add to the AppKernel.php
        // Now you can just do
        // bin/console doctrine:migrations:diff    and check the file.
        // bin/console doctrine:migrations:migrate
    </ul>
    </ul>

{% endblock %}

{% block javascripts %}
    {#  Tbe below parent() will keep the scripts in the original block.  #}
    {{  parent()  }}

    {#   Below is the script specific to this page.   #}
    <script src="{{ asset('js/additional.js') }}"></script>

{% endblock %}